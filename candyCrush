class Solution {
    public int[][] candyCrush(int[][] board) {
        
        //error checking
        if(board == null || board.length ==0){
            return board;
        }
        
        boolean isStable = true;
        
        //STEP 1: tag rows
        for(int i =0; i < board.length; i++){
            for(int j=0; j < board[i].length -2; j++){
                int num1 = Math.abs(board[i][j]);
                int num2 = Math.abs(board[i][j+1]);
                int num3 = Math.abs(board[i][j+2]);
                
                if(num1 == num2 && num2 == num3 && num1 != 0){
                    board[i][j] = num1 * -1;
                    board[i][j+1] = num2 * -1;
                    board[i][j+2] = num3 * -1;
                    isStable = false;
                }
            }
        }
        
        //STEP 2: tag cols
        for(int j = 0; j < board[0].length; j++){
            for(int i = 0; i < board.length-2; i++){
                int num1 = Math.abs(board[i][j]);
                int num2 = Math.abs(board[i+1][j]);
                int num3 = Math.abs(board[i+2][j]);
                
                if(num1 == num2 && num2 == num3 && num1 != 0){
                    board[i][j] = num1 * -1;
                    board[i+1][j] = num2 * -1;
                    board[i+2][j] = num3 * -1;
                    isStable = false;
                }
            }
        }
        
        //STEP 3: drop candy
        for(int j=0; j<board[0].length; j++){
            //move all positive numbers down
            int idx = board.length-1;
            for(int i = board.length-1; i>-1; i--){
                if(board[i][j] > 0){
                    board[idx][j] = board[i][j];
                    idx--;
                }
            }
            for(int i = idx; i >-1; i--){
                board[i][j] = 0;
            }
        }
        
        
        if (!isStable){
            candyCrush(board);
        }
        
        return board;
    }
}
