/** You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, 
which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, 
to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list. **/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/

class Solution {
    public Node flatten(Node head) {
        
        Node ptr = head;
        Stack<Node> remNodes = new Stack<>();
        
        while(ptr!=null){
            if(ptr.child!=null){
                //end ties between ptr and ptr.next if ptr.next exists
                if(ptr.next!=null){
                    remNodes.push(ptr.next);
                    ptr.next.prev = null;
                }
                //create ties with ptr and ptr.child
                ptr.next = ptr.child;
                ptr.child.prev = ptr;
                ptr.child = null;
            }
            if(ptr.next!=null){
                ptr = ptr.next;
            }
            else{
                break;
            }
        }
        
        //attach the remaining nodes
        while(!remNodes.isEmpty()){
            ptr.next = remNodes.pop();
            ptr.next.prev = ptr;
            while(ptr.next!=null){
                ptr=ptr.next;
            }
        }
        return head;
    }
}
